#VRML V2.0 utf8

# Copyright Daniel.Schneider@tecfa.unige.ch
# Free for all non-commerical uses if you keep this notice intact
# and share with others.


# ----------------------------------------------------------------------
#
# The Body
#
# ----------------------------------------------------------------------

# Standardized Body Parts:
# - bodyCol colors everything except the nose
# - Limb is used to build upper/lower arms/legs
# - Extremity is used to build hands and feet

PROTO bodyCol [
	      ]
{
   Appearance {
      material Material {
	 ambientIntensity 0.25
	 diffuseColor 0.75 0 0.04
	 specularColor 0.9 0.9 0.9
	 emissiveColor 0 0 0
	 shininess 1
	 transparency 0
      }

   }
}
PROTO Limb [
	   ]
{
   Shape {
      appearance bodyCol {
      }

      geometry Cylinder {
	 radius 0.05
	 height 0.4
      }

   }
}

PROTO Extremity [
	   ]
{
   Shape {
      appearance bodyCol {
      }

      geometry Cone {
	 bottomRadius 0.1
	 height 0.1
      }
   }
}


#----------------------------------------------------------------------
# The avatar
#
# Its parts ought to be rewritten as set of protos 
# (for better modularity among other reasons)
# ... but this way it is probably more efficient


# The position in x,z space
DEF positionBot Transform {
   children [
      # The rotation (around the y axis) of the Bot
      DEF rotationBot Transform {
	 children [
	    # Start of the body definition
	    # hmm maybe I ought to rename body parts to body joints like in hanim.
	    DEF pelvis Transform {
	       translation 0 0 0
	       center 0.8 0 0
	       children [
		  DEF upperBody Transform {
		     center 0 0.8 0
		     children [
			DEF trunk Transform {
			   translation 0 1.2 0
			   children Shape {
			      appearance bodyCol { }
			      geometry Cone {
				 bottomRadius 0.25
				 height 0.8
			      }
			   }
			}
			DEF head_joint Transform {
			   center 0 1.6 0
			   children [
			      DEF head Transform {
				 translation 0 1.7 0
				 center 0 0 0.025
				 children [
				    DEF skull Transform {
				       translation 0 0 0
				       children Shape {
					  appearance bodyCol { }
					  geometry Sphere {
					     radius 0.2
					  }
				       }
				    }
				    DEF nose Transform {
				       translation 0 0 0.2
				       children Shape {
					  appearance Appearance {
					     material Material {
						ambientIntensity 0.25
						diffuseColor 0.4 0 0.75
						specularColor 0.9 0.9 0.9
						emissiveColor 0 0 0
						shininess 0.8
						transparency 0
					     }
					  }
					  geometry Sphere { 
					     radius 0.05
					  }
				       }
				    }
				   ]
			      }
			     ]
			}
			DEF leftArm Transform {
			   translation 0.05 1.2 0
			   rotation 0 0 -1  1
			   children [
			      DEF upperLeftArm Transform {
				 translation 0 0.2 0
				 center 0 -0.2 0
				 children Limb { }
			      }
			      DEF lowerLeftArm Transform {
				 translation 0 0.6 0
				 center 0 -0.2 0
				 children [ 
				    Limb { }
				    DEF leftHand Transform {
				       translation 0 0.15 0
				       center 0 0 0
				       children [
					  Transform {
					     center 0 0 0
					     rotation 0 0 1 3.1416
					     children Extremity {}
					  }
					 ]
				    }
				   ]
			      }
			     ]
			}
			DEF rightArm Transform {
			   translation -0.05 1.2 0
			   rotation 0 0 1  1
			   children [
			      DEF upperRightArm Transform {
				 translation 0 0.2 0
				 center 0 -0.2 0
				 children Limb { }
			      }
			      DEF lowerRightArm Transform {
				 translation 0 0.6 0
				 center 0 -0.2 0
				 children [
				    Limb { }
				    DEF rightHand Transform {
				       translation 0 0.15 0
				       center 0 0 0
				       children [
					  Transform {
					     rotation 0 0 1 3.1416
					     children Extremity {}
					  }
					 ]
				    }
				    ]
			      }
			     ]
			}
		       ]
		  }
		  DEF leftLeg Transform {
		     translation 0.1 0.4 0
		     center 0 0.4 0
		     children [
			DEF upperLeftLeg Transform {
			   translation 0 0.2 0
			   center 0 0.2 0
			   children Limb { }
			}
			DEF lowerLeftLeg Transform {
			   translation 0 -0.2 0
			   center 0 0.2 0
			   children [
			      Limb { }
			      DEF leftFoot Transform {
				 translation 0 -0.15 0
				 children [
				    Extremity {}
				   ]
			      }
			     ]
			}
		       ]
		  }
		  DEF rightLeg Transform {
		     translation -0.1 0.4 0
		     center 0 0.4 0
		     children [
			DEF upperRightLeg Transform {
			   translation 0 0.2 0
			   center 0 0.2 0
			   children Limb { }
			}
			DEF lowerRightLeg Transform {
			   translation 0 -0.2 0
			   center 0 0.2 0
			   children [
			      Limb { }
			      DEF rightFoot Transform {
				 translation 0 -0.15 0
				 children [
				    Extremity {}
				   ]
			      }
			      ]
			}
		       ]
		  }
		 ]
	    }
	    # End of the body definition
	   ]
      }
     ]
}




# ----------------------------------------------------------------------
# Animations
# These need to be triggered by something (i.e. each timeSensor)
#
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# left/right/turn animation

DEF move_Animation Group {
   children [
      DEF left_Time TimeSensor {
	 cycleInterval 1
	 startTime 0
	 stopTime 1
      }
      
      DEF left_SmallBotRotationInterp OrientationInterpolator {
	 key [ 0, 0.5, 1 ]
	 keyValue [ 0 1 0   0,
		    0 1 0  0.3,
		    0 1 0  0.785398 ]
      }

      DEF right_Time TimeSensor {
	 cycleInterval 1
	 startTime 0
	 stopTime 1
      }
      
      DEF  right_SmallBotRotationInterp OrientationInterpolator {
	 key [ 0, 0.5, 1 ]
	 keyValue [ 0 -1 0  0,
		    0 -1 0  0.3,
		    0 -1 0  0.785398 ]
      }

      # Needs some cleaning up
      # It looks so complicated because you can't count on the browser respecting
      # the rotation axis you hand it. I.e. something '1 0 0 -rot' can become
      # something '-1 0 0 rot'.

      DEF turn_Script Script {
	 eventOut SFRotation   outRotation
	 eventIn  SFRotation   inLeftRot
	 eventIn  SFRotation   inRightRot
	 eventIn  SFTime       hasResetClicked
	 eventIn  SFBool       leftAnimIsOn
	 eventIn  SFBool       rightAnimIsOn
	 field    SFFloat      rotPosition 0
	 url "vrmlscript:
       function inLeftRot(value, time)
       {
          newRot = rotPosition + value[3];
          // print ('rotPosition=', rotPosition, ' Value3=', value[3], ' newRot =', newRot);
          outRotation[0] = 0;
          outRotation[1] = 1;
          outRotation[2] = 0;
          outRotation[3] = newRot;
        }

       function inRightRot(value, time)
       {
          newRot = rotPosition - value[3];
          // print ('rotPosition=', rotPosition, ' Value3=', value[3], ' newRot =', newRot);
          outRotation[0] = 0;
          outRotation[1] = 1;
          outRotation[2] = 0;
          outRotation[3] = newRot;
        }

       function hasResetClicked(value, time)
        {
           rotPosition = 0;
        }

       function leftAnimIsOn(value, time)
        {
           // AFTER the animation
           if (value == FALSE) {
              // remember the rotation to feed the interpolator
              rotPosition = rotPosition + 0.785;
              // correct rot value after a full turn
              if ( Math.abs(rotPosition) > 6.2)
                  { rotPosition = 0; }
              // correct the rotation axis and position.. DOES not bloody work
              // needs another timer to clean up I guess
              outRotation[0] = 0;
              outRotation[1] = 1;
              outRotation[2] = 0;
              outRotation[3] = rotPosition;
           }
        }

       function rightAnimIsOn(value, time)
        {
           // AFTER the animation 
           if (value == FALSE) {
              // remember the rotation to feed the interpolator
              rotPosition = rotPosition - 0.785;
              // correct rot value after a full turn
              if ( Math.abs(rotPosition) > 6.2)
                 { rotPosition = 0; }
              // correct the rotation axis and position 
              outRotation[0] = 0;
              outRotation[1] = 1;
              outRotation[2] = 0;
              outRotation[3] = rotPosition;
              }
        }
      
          "
      }
     ]
}


# left
ROUTE left_Time.fraction_changed TO left_SmallBotRotationInterp.set_fraction
ROUTE left_SmallBotRotationInterp.value_changed TO turn_Script.inLeftRot

#right
ROUTE right_Time.fraction_changed TO right_SmallBotRotationInterp.set_fraction
ROUTE right_SmallBotRotationInterp.value_changed TO turn_Script.inRightRot

# output for both
ROUTE turn_Script.outRotation TO rotationBot.set_rotation

# remember new rotation
#    + cleanup (NOT fully working  ... build a delayed timer ??)
ROUTE left_Time.isActive TO turn_Script.leftAnimIsOn
ROUTE right_Time.isActive TO turn_Script.rightAnimIsOn



# ----------------------------------------------------------------------
# move animation

DEF move1_Animation Group {
   children [
      DEF move1_Time TimeSensor {
	 cycleInterval 1
	 startTime 0
	 stopTime 1
      }
      DEF fly_Time TimeSensor {
	 cycleInterval 1
	 startTime 0
	 stopTime 1
      }
      DEF fly_positionTranslationInterp PositionInterpolator {
 	 key [ 0, 0.5 ]
 	 keyValue [ 0 0 0,
 		    0 0 1 ]
      }
      DEF fly_leftArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.5, 1 ]
	 keyValue [ 0 0 -1  1,
		    0 0 1  3.97238,
		    0 0 -1  1 ]
      }
      DEF fly_rightArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.5, 1 ]
	 keyValue [ 0 0 1  1,
		    0 0 1  2.39214,
		    0 0 1  1 ]
      }

      DEF move1_Script Script {
	 eventIn   SFBool   isActive
	 eventIn   SFFloat  inFraction
	 eventOut  SFVec3f  outTranslation
	 eventOut  SFTime   startInterpolationTime
	 field     SFNode   rotBot USE rotationBot
	 field     SFNode   posBot USE positionBot
	 field     SFFloat  stepX 1.0
	 field     SFFloat  stepZ 1.0
	 field     SFFloat  currentX 1.0
	 field     SFFloat  currentZ 1.0
	 field     SFFloat  rotYDirection 1
	 field     SFFloat  step 1.0
	 url "vrmlscript:
         // compute ONCE the place to go and the current position
         function isActive (value, time)
         {
         rotation = rotBot.rotation_changed[3];
         // since the browser does not respect OUR rotation Defs we have to recalculate
         if (value == TRUE) {
              if (rotBot.rotation_changed[1] < 0.) {
              rotation = 6.283185 - rotation ;
              }  
            stepX = step * Math.sin(rotation);
            stepZ = step * Math.cos(rotation);
            currentX = posBot.translation_changed[0];
            currentZ = posBot.translation_changed[2];
            startInterpolationTime = time;
            }
         }

         // compute and display the movement (simple linear interpolator)
         function inFraction (value, time)
         {
           outTranslation[0] = currentX + stepX * value;
           outTranslation[2] = currentZ + stepZ * value;
         }
          "
      }
     ]
}



ROUTE move1_Time.isActive TO move1_Script.isActive
ROUTE move1_Script.outTranslation TO positionBot.set_translation

# moving forward, interpolation done by the script
ROUTE move1_Script.startInterpolationTime TO fly_Time.set_startTime
ROUTE fly_Time.fraction_changed TO move1_Script.inFraction

# flap flap
ROUTE fly_Time.fraction_changed TO fly_leftArmRotationInterp.set_fraction
ROUTE fly_Time.fraction_changed TO fly_rightArmRotationInterp.set_fraction
ROUTE fly_leftArmRotationInterp.value_changed TO leftArm.set_rotation
ROUTE fly_rightArmRotationInterp.value_changed TO rightArm.set_rotation

# ----------------------------------------------------------------------

DEF jump_Animation Group {
   children [
      DEF jump_Time TimeSensor {
	 cycleInterval 3
	 startTime 0
	 stopTime 1
      }
      
      DEF jump_pelvisTranslationInterp PositionInterpolator {
	 key [ 0, 0.4, 0.85, 1 ]
	 keyValue [ 0 0 0,
		    0 -0.306366 0,
		    0 0.369232 -0.00409031,
		    0 0 0 ]
      }
      DEF jump_leftArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.4, 0.85, 1 ]
	 keyValue [ 0 0 -1  1,
		    -3.47394e-10 -8.03368e-10 1  3.75395,
		    -7.86047e-09 2.90456e-09 -1  0.468037,
		    0 0 -1  1 ]
      }
      DEF jump_rightArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.4, 0.85, 1 ]
	 keyValue [ 0 0 1  1,
		    -4.88272e-10 9.48477e-10 1  2.52434,
		    -8.53984e-09 -4.41443e-09 1  0.461373,
		    0 0 1  1 ]
      }
      DEF jump_rightLegRotationInt OrientationInterpolator {
	 key [ 0, 0.2, 0.4, 0.85,
	       1 ]
	 keyValue [ 0 0 1  0,
		    0 0 -1  0.854004,
		    0 0 -1  1.05324,
		    0 0 -1  0.353424,
		    0 0 1  0 ]
      }
      DEF jump_lowerRightLegRotationInt OrientationInterpolator {
	 key [ 0, 0.2, 0.4, 0.85,
	       1 ]
	 keyValue [ 0 0 1  0,
		    0 0 1  1.62367,
		    0 0 1  1.91417,
		    0 0 1  0.834122,
		    0 0 1  0 ]
      }
      DEF jump_leftLegRotationInt OrientationInterpolator {
	 key [ 0, 0.2, 0.4, 0.85,
	       1 ]
	 keyValue [ 0 0 1  0,
		    0 0 1  0.52202,
		    0 0 1  0.970313,
		    0 0 -1  0.199409,
		    0 0 1  0 ]
      }
      DEF jump_lowerLeftLegRotationInterp OrientationInterpolator {
	 key [ 0, 0.2, 1 ]
	 keyValue [ 0 0 1  0,
		    0 0 1  0.527997,
		    0 0 1  0 ]
      }
     ]
}


# jump_ routes

ROUTE jump_Time.fraction_changed TO jump_pelvisTranslationInterp.set_fraction
ROUTE jump_Time.fraction_changed TO jump_leftArmRotationInterp.set_fraction
ROUTE jump_Time.fraction_changed TO jump_rightArmRotationInterp.set_fraction
ROUTE jump_Time.fraction_changed TO jump_rightLegRotationInt.set_fraction
ROUTE jump_Time.fraction_changed TO jump_lowerRightLegRotationInt.set_fraction
ROUTE jump_Time.fraction_changed TO jump_leftLegRotationInt.set_fraction
ROUTE jump_Time.fraction_changed TO jump_lowerLeftLegRotationInterp.set_fraction
ROUTE jump_leftArmRotationInterp.value_changed TO leftArm.set_rotation
ROUTE jump_rightArmRotationInterp.value_changed TO rightArm.set_rotation
ROUTE jump_lowerLeftLegRotationInterp.value_changed TO lowerLeftLeg.set_rotation
ROUTE jump_leftLegRotationInt.value_changed TO leftLeg.set_rotation
ROUTE jump_lowerRightLegRotationInt.value_changed TO lowerRightLeg.set_rotation
ROUTE jump_rightLegRotationInt.value_changed TO rightLeg.set_rotation
ROUTE jump_pelvisTranslationInterp.value_changed TO pelvis.set_translation


# ----------------------------------------------------------------------
# bow Animation

DEF bow_Animation Group {
   children [
      DEF bow_Time TimeSensor {
	 cycleInterval 4
	 startTime 0
	 stopTime 1
      }
      
      DEF bow_upperBodyRotationInterp OrientationInterpolator {
	 key [ 0, 0.2, 0.3, 0.65,
	       0.8, 1 ]
	 keyValue [ 1 0 0  0.0156098,
		    1 0 0  0.210045,
		    1 0 0  0.293502,
		    1 0 0  1.08345,
		    1 0 0  0.815703,
		    1 0 0  0.00707587 ]
      }
     ]
}

ROUTE bow_Time.fraction_changed TO bow_upperBodyRotationInterp.set_fraction
ROUTE bow_upperBodyRotationInterp.value_changed TO upperBody.set_rotation


# ----------------------------------------------------------------------
# lie Animation
# ----------------------------------------------------------------------

DEF lie_Animation Group {
   children [
      DEF lie_Time TimeSensor {
	 cycleInterval 6
	 startTime 0
	 stopTime 1
      }

      DEF lie_head_jointRotationInterp OrientationInterpolator {
	 key [ 0, 0.1, 0.25, 0.75,
	       0.9, 1 ]
	 keyValue [ 0 0 1  0,
		    0.513482 0.845919 -0.144074  0.640539,
		    0.633191 0.772175 -0.0530594  1.14891,
		    0.633191 0.772175 -0.0530594  1.14891,
		    0.513482 0.845919 -0.144074  0.640539,
		    0 0 1  0 ]
      }
      DEF lie_noseScaleFactorInterp PositionInterpolator {
	 key [ 0, 0.1, 0.25, 0.4,
	       0.65, 0.75, 0.9, 1 ]
	 keyValue [ 1 1 1,
		    1 1 1,
		    1 1 1,
		    1 1 4,
		    1 1 4,
		    1 1 1,
		    1 1 1,
		    1 1 1 ]
      }
     ]
}

ROUTE lie_Time.fraction_changed TO lie_head_jointRotationInterp.set_fraction
ROUTE lie_noseScaleFactorInterp.value_changed TO nose.set_scale
ROUTE lie_head_jointRotationInterp.value_changed TO head_joint.set_rotation
ROUTE lie_Time.fraction_changed TO lie_noseScaleFactorInterp.set_fraction

# ----------------------------------------------------------------------

DEF nod_Animation Group {
   children [
      DEF nod_Time TimeSensor {
	 cycleInterval 1
	 startTime 0
	 stopTime 1
      }

      DEF nod_head_jointRotationInterp OrientationInterpolator {
	 key [ 0, 0.2, 0.4, 0.6,
	       0.8, 1 ]
	 keyValue [ 0 0 1  0,
		    1 0 0  1.29813,
		    1 0 0  0.289812,
		    1 0 0  1.24239,
		    -1 5.4655e-08 6.65904e-09  0.432691,
		    0 0 1  0 ]
      }
     ]
}

ROUTE nod_Time.fraction_changed TO nod_head_jointRotationInterp.set_fraction
ROUTE nod_head_jointRotationInterp.value_changed TO head_joint.set_rotation



# ----------------------------------------------------------------------

DEF shake_Animation Group {
   children [
      DEF shake_Time TimeSensor {
	 cycleInterval 2
	 startTime 0
	 stopTime 1
      }

      DEF shake_head_jointRotationInterp OrientationInterpolator {
	 key [ 0, 0.15, 0.35, 0.6,
	       0.8, 1 ]
	 keyValue [ 0 0 1  0,
		    -1.99339e-08 -1 2.22165e-06  0.566215,
		    -9.73787e-08 1 -1.95935e-06  1.06193,
		    -4.33892e-08 -1 2.13132e-06  0.886162,
		    -2.97762e-09 1 -2.04731e-06  0.942783,
		    0 0 1  0 ]
      }
     ]
}

ROUTE shake_head_jointRotationInterp.value_changed TO head_joint.set_rotation
ROUTE shake_Time.fraction_changed TO shake_head_jointRotationInterp.set_fraction

# ----------------------------------------------------------------------

DEF hello_Animation Group {
   children [
      DEF hello_Time TimeSensor {
	 cycleInterval 3
	 startTime 0
	 stopTime 1
      }

      DEF hello_rightArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.133333, 0.933333, 1 ]
	 keyValue [ 0 0 1  1,
		    1.05568e-08 2.04352e-08 1  0.703802,
		    -6.32166e-09 -7.11853e-10 1  1.00983,
		    0 0 1  1 ]
      }
      DEF hello_lowerRightArmRotationInterp OrientationInterpolator {
	 key [ 0, 0.133333, 0.266667, 0.4,
	       0.533333, 0.666667, 0.8, 0.933333,
	       1 ]
	 keyValue [ 0 0 1  0,
		    4.85752e-08 3.38975e-08 -1  0.264696,
		    4.78068e-08 2.88165e-08 -1  0.790702,
		    1.35387e-07 1.74757e-07 -1  0.178293,
		    4.60746e-08 5.9474e-08 -1  0.971838,
		    1.08577e-07 1.24105e-07 -1  0.288802,
		    2.82001e-08 1.60877e-07 -1  1.33964,
		    9.25942e-07 9.39474e-07 -1  0.0284633,
		    0 0 1  0 ]
      }

      DEF hello_rightHandRotationInterp OrientationInterpolator {
	 key [ 0, 0.133333, 0.266667, 0.4,
	       0.533333, 0.666667, 0.8, 0.933333,
	       1 ]
	 keyValue [ 0 0 1  0,
		    0 0 -1  0.2,
		    0 0 -1  0.4,
		    0 0 -1  0.1,
		    0 0 -1  0.5,
		    0 0 -1  0.1,
		    0 0 -1  0.7,
		    0 0 -1  0.1,
		    0 0 1  0 ]
      }

     ]
}


ROUTE hello_Time.fraction_changed TO hello_rightArmRotationInterp.set_fraction
ROUTE hello_Time.fraction_changed TO hello_lowerRightArmRotationInterp.set_fraction
ROUTE hello_Time.fraction_changed TO hello_rightHandRotationInterp.set_fraction

ROUTE hello_lowerRightArmRotationInterp.value_changed TO lowerRightArm.set_rotation
ROUTE hello_rightArmRotationInterp.value_changed TO rightArm.set_rotation
ROUTE hello_rightHandRotationInterp.value_changed TO rightHand.set_rotation

# ----------------------------------------------------------------------

DEF break_Animation Group {
   children	[
      DEF break_Time TimeSensor {
	 cycleInterval	2
	 startTime	0
	 stopTime	1
      }
      DEF break_PelvisRotationInterp OrientationInterpolator {
	 key	[ 0, 0.25, 0.35 ]
	 keyValue	[ 1 0 0  0,
			  -1 0 0  0.657757,
			  -1 0 0  1.52948 ]
      }
      DEF break_PelvisCenterInterp PositionInterpolator {
	 key	[ 0, 0.25 ]
	 keyValue	[ 0 0.8 0,
			  0 -0.02 0 ]
      }
      DEF break_LowerLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.6 0,
			  0.0496653 0.877655 1.26753e-07 ]
      }
      DEF break_lowerLeftArmRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 1  0,
			  1.3059e-08 -9.65245e-09 -1  0.389523 ]
      }
      DEF break_upperLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.0313257 0.383882 6.14673e-08 ]
      }
      DEF break_SkullTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45, 0.55, 0.75,
		  0.85, 1 ]
	 keyValue	[ 0 0 0,
			  0.00401424 0.223629 0.114973,
			  0.438757 0.0192527 0.128277,
			  1.19666 -1.49847 0.214116,
			  1.19333 -1.72718 0.222677,
			  0.384952 -2.19677 0.238098 ]
      }
      DEF break_upperRightArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.00405823 0.402582 -5.3551e-08 ]
      }
      DEF break_lowerRightArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.6 0,
			  -0.00642948 0.881502 2.52854e-07 ]
      }
      DEF break_upperRightLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  -0.136312 0.0835656 0.0469383 ]
      }
      DEF break_upperLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.063132 0.0992313 0.0514853 ]
      }
      DEF break_upperLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 1  0,
			  7.79322e-08 1.28658e-07 1  0.215281 ]
      }
      DEF break_lowerRightLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ -1.19209e-07 -0.2 -1.13505e-09,
			  -0.147336 -0.463126 0.0824864 ]
      }
      DEF break_lowerLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ -4.99189e-07 -0.199999 2.91038e-11,
			  0.0304358 -0.42021 0.0748588 ]
      }
      DEF break_lowerLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 1  0,
			  1.88789e-08 -1.1765e-07 -1  0.59947 ]
      }
      DEF break_trunkTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 1.2 0,
			  0 1.2 0.0836104 ]
      }
      DEF break_trunkRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 1 0 0  0,
			  1 0 0  5.93 ]
      }
      DEF break_noseTranslationInterp PositionInterpolator {
	 key	[ 0, 1 ]
	 keyValue	[ 0 0 0.2,
			  0 0 -0.0130226 ]
      }
     ]
}
# break routes

ROUTE break_Time.fraction_changed TO break_PelvisRotationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_PelvisCenterInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_LowerLeftArmTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_lowerLeftArmRotationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_upperLeftArmTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_SkullTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_upperRightArmTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_lowerRightArmTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_upperRightLegTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_upperLeftLegTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_upperLeftLegRotationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_lowerRightLegTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_lowerLeftLegTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_lowerLeftLegRotationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_trunkTranslationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_trunkRotationInterp.set_fraction
ROUTE break_Time.fraction_changed TO break_noseTranslationInterp.set_fraction
ROUTE break_SkullTranslationInterp.value_changed TO skull.set_translation
ROUTE break_PelvisRotationInterp.value_changed TO pelvis.set_rotation
ROUTE break_PelvisCenterInterp.value_changed TO pelvis.set_center
ROUTE break_trunkTranslationInterp.value_changed TO trunk.set_translation
ROUTE break_trunkRotationInterp.value_changed TO trunk.set_rotation
ROUTE break_noseTranslationInterp.value_changed TO nose.set_translation
ROUTE break_upperLeftArmTranslationInterp.value_changed TO upperLeftArm.set_translation
ROUTE break_LowerLeftArmTranslationInterp.value_changed TO lowerLeftArm.set_translation
ROUTE break_lowerLeftArmRotationInterp.value_changed TO lowerLeftArm.set_rotation
ROUTE break_upperRightArmTranslationInterp.value_changed TO upperRightArm.set_translation
ROUTE break_lowerRightArmTranslationInterp.value_changed TO lowerRightArm.set_translation
ROUTE break_upperLeftLegTranslationInterp.value_changed TO upperLeftLeg.set_translation
ROUTE break_upperLeftLegRotationInterp.value_changed TO upperLeftLeg.set_rotation
ROUTE break_lowerLeftLegTranslationInterp.value_changed TO lowerLeftLeg.set_translation
ROUTE break_lowerLeftLegRotationInterp.value_changed TO lowerLeftLeg.set_rotation
ROUTE break_upperRightLegTranslationInterp.value_changed TO upperRightLeg.set_translation
ROUTE break_lowerRightLegTranslationInterp.value_changed TO lowerRightLeg.set_translation


# ----------------------------------------------------------------------


DEF explode_Animation Group {
   children	[
      DEF explode_Time TimeSensor {
	 cycleInterval	2
	 startTime	0
	 stopTime	1
      }
      DEF explode_LowerLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.6 0,
			  0.0496653 0.877655 1.26753e-07 ]
      }
      DEF explode_upperLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.0313257 0.383882 6.14673e-08 ]
      }
      DEF explode_SkullTranslationInterp PositionInterpolator {
	 key	[ 0, 0.5 1 ]
	 keyValue	[ 0 0 0,
			  0 0.5 0
			  0 1 0 ]
      }
      DEF explode_upperRightArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.00405823 0.402582 -5.3551e-08 ]
      }
      DEF explode_lowerRightArmTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.6 0,
			  -0.00642948 0.881502 2.52854e-07 ]
      }

      DEF explode_rightHandTranslationInterp PositionInterpolator {
	 key [ 0, 0.45 1]
	 keyValue [0 0.15 0,
		   0 0.25 0,
		   0 0.4 0 ]
      }
      DEF explode_upperRightLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0 0.3 0 ]
      }
      DEF explode_upperLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0.2 0,
			  0.063132 0.0992313 0.0514853 ]
      }
      DEF explode_upperLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 1  0,
			  7.79322e-08 1.28658e-07 1  0.215281 ]
      }
      DEF explode_lowerRightLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 0,
			  0 -0.2 0 ]
      }
      DEF explode_lowerLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ -4.99189e-07 -0.199999 2.91038e-11,
			  0.0304358 -0.42021 0.0748588 ]
      }
      DEF explode_lowerLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0, 0.45 ]
	 keyValue	[ 0 0 1  0,
			  1.88789e-08 -1.1765e-07 -1  0.59947 ]
      }
      DEF explode_trunkTranslationInterp PositionInterpolator {
	 key	[ 0, 0.45 1 ]
	 keyValue	[ 0 1.3 0,
			  0 1.4 0,
			  0 1.5 0 ]
      }
      DEF explode_noseTranslationInterp PositionInterpolator {
	 key	[ 0, 1 ]
	 keyValue	[ 0 0 0.5,
			  1 0.8 0 ]
      }
     ]
}
# break routes

ROUTE explode_Time.fraction_changed TO explode_LowerLeftArmTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_upperLeftArmTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_SkullTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_upperRightArmTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_lowerRightArmTranslationInterp.set_fraction
ROUTE  explode_Time.fraction_changed TO explode_rightHandTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_upperRightLegTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_upperLeftLegTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_upperLeftLegRotationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_lowerRightLegTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_lowerLeftLegTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_lowerLeftLegRotationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_trunkTranslationInterp.set_fraction
ROUTE explode_Time.fraction_changed TO explode_noseTranslationInterp.set_fraction
ROUTE explode_SkullTranslationInterp.value_changed TO skull.set_translation
ROUTE explode_trunkTranslationInterp.value_changed TO trunk.set_translation
ROUTE explode_noseTranslationInterp.value_changed TO nose.set_translation
ROUTE explode_upperLeftArmTranslationInterp.value_changed TO upperLeftArm.set_translation
ROUTE explode_LowerLeftArmTranslationInterp.value_changed TO lowerLeftArm.set_translation
ROUTE explode_upperRightArmTranslationInterp.value_changed TO upperRightArm.set_translation
ROUTE explode_lowerRightArmTranslationInterp.value_changed TO lowerRightArm.set_translation
ROUTE explode_rightHandTranslationInterp.value_changed TO rightHand.set_translation
ROUTE explode_upperLeftLegTranslationInterp.value_changed TO upperLeftLeg.set_translation
ROUTE explode_upperLeftLegRotationInterp.value_changed TO upperLeftLeg.set_rotation
ROUTE explode_lowerLeftLegTranslationInterp.value_changed TO lowerLeftLeg.set_translation
ROUTE explode_lowerLeftLegRotationInterp.value_changed TO lowerLeftLeg.set_rotation
ROUTE explode_upperRightLegTranslationInterp.value_changed TO upperRightLeg.set_translation
ROUTE explode_lowerRightLegTranslationInterp.value_changed TO lowerRightLeg.set_translation



# ----------------------------------------------------------------------


DEF repair_Animation Group {
   children	[
      DEF repair_Time TimeSensor {
	 cycleInterval	1
	 startTime	0
	 stopTime	1
      }
      DEF repair_pelvisTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0 0,
			  0 0 0 ]
      }
      DEF repair_pelvisCenterInterp   PositionInterpolator {
	 key	[ 0.3 1]
	 keyValue	 [ 0.8 0 0,
			   0.8 0 0 ]
      }
      DEF repair_pelvisRotationInterp OrientationInterpolator {
	 key	[ 0.5 1 ]
	 keyValue       [ 0 1 0  0,
                          0 1 0  0 ]
      }
      DEF repair_pelvisRotationInterp2 OrientationInterpolator {
	 key	[ 0.5 1 ]
	 keyValue       [ 1 0 0 0,
                          1 0 0 0 ]
      }
      DEF repair_lowerLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.6 0,
			  0 0.6 0 ]
      }
      DEF repair_lowerLeftArmRotationInterp OrientationInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0 1  0,
			  0 0 1  0 ]
      }
      DEF repair_upperLeftArmTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.2 0,
			  0 0.2 0 ]
      }
      DEF repair_SkullTranslationInterp PositionInterpolator {
	 key	[ 0.5 1]
	 keyValue	[ 0 0 0,
			  0 0 0 ]
      }
      DEF repair_upperRightArmTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.2 0,
			  0 0.2 0 ]
      }
      DEF repair_lowerRightArmTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.6 0,
			  0 0.6 0 ]
      }
      DEF repair_rightHandTranslationInterp PositionInterpolator {
	 key [ 0, 0.45 1]
	 keyValue [0 0.4 0,
		   0 0.25 0,
		   0 0.15 0 ]
      }
      DEF repair_upperRightLegTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.2 0,
			  0 0.2 0 ]
      }
      DEF repair_upperLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0.2 0,
			  0 0.2 0 ]
      }
      DEF repair_upperLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0 1  0,
			  0 0 1  0 ]
      }
      DEF repair_lowerRightLegTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 -0.2 0,
			  0 -0.2 0 ]
      }
      DEF repair_lowerLeftLegTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 -0.2 0,
			  0 -0.2 0 ]
      }
      DEF repair_lowerLeftLegRotationInterp OrientationInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 0 1  0,
			  0 0 1  0 ]
      }
      DEF repair_trunkTranslationInterp PositionInterpolator {
	 key	[ 0.5 1 ]
	 keyValue	[ 0 1.2 0,
			  0 1.2 0 ]
      }
      DEF repair_trunkRotationInterp OrientationInterpolator {
	 key	[0.5 1]
	 keyValue	[ 1 0 0  0,
			  1 0 0  0]
      }
      DEF repair_noseTranslationInterp PositionInterpolator {
	 key	[ 0.5 1]
	 keyValue	[ 0 0 4,
			  0 0 0.2 ]
      }
     ]
}

# repair_ routes
ROUTE repair_Time.fraction_changed TO repair_pelvisCenterInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_pelvisRotationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_pelvisRotationInterp2.set_fraction
ROUTE repair_Time.fraction_changed TO repair_pelvisTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerLeftArmTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerLeftArmRotationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_upperLeftArmTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_SkullTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_upperRightArmTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerRightArmTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_rightHandTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_upperRightLegTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_upperLeftLegTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_upperLeftLegRotationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerRightLegTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerLeftLegTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_lowerLeftLegRotationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_trunkTranslationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_trunkRotationInterp.set_fraction
ROUTE repair_Time.fraction_changed TO repair_noseTranslationInterp.set_fraction
ROUTE repair_SkullTranslationInterp.value_changed TO skull.set_translation
ROUTE repair_trunkTranslationInterp.value_changed TO trunk.set_translation
ROUTE repair_trunkRotationInterp.value_changed TO trunk.set_rotation
ROUTE repair_noseTranslationInterp.value_changed TO nose.set_translation
ROUTE repair_upperLeftArmTranslationInterp.value_changed TO upperLeftArm.set_translation
ROUTE repair_lowerLeftArmTranslationInterp.value_changed TO lowerLeftArm.set_translation
ROUTE repair_lowerLeftArmRotationInterp.value_changed TO lowerLeftArm.set_rotation
ROUTE repair_upperRightArmTranslationInterp.value_changed TO upperRightArm.set_translation
ROUTE repair_lowerRightArmTranslationInterp.value_changed TO lowerRightArm.set_translation
ROUTE repair_rightHandTranslationInterp.value_changed TO rightHand.set_translation
ROUTE repair_upperLeftLegTranslationInterp.value_changed TO upperLeftLeg.set_translation
ROUTE repair_upperLeftLegRotationInterp.value_changed TO upperLeftLeg.set_rotation
ROUTE repair_lowerLeftLegTranslationInterp.value_changed TO lowerLeftLeg.set_translation
ROUTE repair_lowerLeftLegRotationInterp.value_changed TO lowerLeftLeg.set_rotation
ROUTE repair_upperRightLegTranslationInterp.value_changed TO upperRightLeg.set_translation
ROUTE repair_lowerRightLegTranslationInterp.value_changed TO lowerRightLeg.set_translation
ROUTE repair_pelvisTranslationInterp.value_changed TO pelvis.set_translation
ROUTE repair_pelvisRotationInterp.value_changed TO pelvis.set_rotation
ROUTE repair_pelvisRotationInterp2.value_changed TO pelvis.set_rotation
ROUTE repair_pelvisCenterInterp.value_changed TO pelvis.set_center


# ----------------------------------------------------------------------

# Reset position

DEF reset_Time TimeSensor {
   cycleInterval 1
   startTime 0
   stopTime 1
}


DEF reset_Script Script {
   eventIn SFBool IsActive
   eventOut SFRotation   outRotation
   eventOut   SFVec3f   outTranslation
   
url "vrmlscript:
       function IsActive (value, time)
       {
       outRotation[0] = 0;
       outRotation[1] = 1;
       outRotation[2] = 0;
       outRotation[3] = 0;
       outTranslation[0] = 0;
       outTranslation[1] = 0;
       outTranslation[2] = 0;
       }
    "
}


# update bot rotation and position
ROUTE reset_Time.isActive TO reset_Script.IsActive
ROUTE reset_Script.outRotation TO rotationBot.rotation
ROUTE reset_Script.outTranslation TO positionBot.translation


# ----------------------------------------------------------------------
# Update position information
# ... good for debugging if the print statement does not work
#     (e.g. Irix CP 1.0)

DEF updateInfo Billboard {
   axisOfRotation 0 1 0
   children Transform {
      translation 1 3 0
      children [
	 Transform {
	    translation 0 -0.3 0
	    children Shape {
	       geometry DEF update_RotString Text {
		  string "Rot: 0 0 0 0"
		  fontStyle FontStyle {
		     justify ["MIDDLE", "MIDDLE"]
		     size 0.25
		     spacing 1
		  }
		  length 0
	       } 	 }
	 }
	 Shape {
	    geometry DEF update_PosString Text {
	       string "Pos: 0 0 0"
	       fontStyle FontStyle {
		  justify ["MIDDLE", "MIDDLE"]
		  size 0.25
		  spacing 1
	       }
	       length 0
	    } 	 }
	]
   } }

# This will not work with Irix CP 1.02

# DEF update_Script Script {
#    eventIn SFBool posIsActive
#    eventIn SFBool rotIsActive
#    field   SFNode    posBot USE positionBot
#    field   SFNode    rotBot USE rotationBot
#    field   SFNode posString USE update_PosString
#    field   SFNode rotString USE update_RotString
#    directOutput TRUE
   
# url "vrmlscript:
#        function rotIsActive (value, time)
#        {
#         rotString.set_string[0] = 'Rot: ' + rotBot.rotation_changed[3];
#        }
#        function posIsActive (value, time)
#        {
#         posString.set_string[0] = 'Pos: ' + posBot.translation_changed[0] + ' ' + posBot.translation_changed[1] + ' ' + posBot.translation_changed[2] + ' ';
#        }
#     "
# }

DEF update_Script Script {
   eventIn SFBool posIsActive
   eventIn SFBool rotIsActive
   eventOut MFString update_PosStr
   eventOut MFString update_RotStr
   # field   SFNode    posBot USE positionBot
   field   SFNode    posBot USE positionBot
   field   SFNode    rotBot USE rotationBot
   
url "vrmlscript:
       function rotIsActive (value, time)
       {
        // update only at the end of an animation
        // contains some hacks to shorten the printed string
        if (value == FALSE) {
        xrot = rotBot.rotation_changed[0];
        yrot = Math.round(rotBot.rotation_changed[1]);
        zrot = rotBot.rotation_changed[2];
        rot  = new String(rotBot.rotation_changed[3]);
          if (rot.length > 2) {
           rot = rot.substring(0,4);
          }
        update_RotStr[0] = 'Rot: ' + xrot + ' ' + yrot + ' ' + zrot + ' ' + rot;
         }
       }
       function posIsActive (value, time)
       {
        if (value == FALSE) {
        xpos = new String(posBot.translation_changed[0]);
        if (xpos.length > 2) {
            xpos = xpos.substring(0,4);
          }
        ypos = posBot.translation_changed[1];
        zpos = new String(posBot.translation_changed[2]);
        if (zpos.length > 2) {
            zpos = zpos.substring(0,4);
          }
        update_PosStr[0] = 'Pos: ' + xpos + ' ' + ypos + ' ' + zpos;
        }
       }
    "
}


# update Text nodes 
ROUTE update_Script.update_RotStr TO update_RotString.set_string
ROUTE update_Script.update_PosStr TO update_PosString.set_string
# update left rotation
ROUTE left_Time.isActive TO update_Script.rotIsActive
# update right rotation
ROUTE right_Time.isActive TO update_Script.rotIsActive
# update fly animation
ROUTE fly_Time.isActive TO update_Script.posIsActive
# update move animation
ROUTE move1_Time.isActive TO update_Script.posIsActive
# update reset
ROUTE reset_Time.isActive TO update_Script.rotIsActive
ROUTE reset_Time.isActive TO update_Script.posIsActive



# ----------------------------------------------------------------------
# Animation Buttons
# you can rip those off and replace by something else
# (but don't forget to take away /replace the ROUTES AT THE END OF THE FILE)
# ----------------------------------------------------------------------


# These two protos are used to build push buttons for animation
# Ought to replaced by GIFs I guess

PROTO touchBox [
		field SFColor color 0 0.43617 0.29533
	       ]
{
   Transform {
      translation 0 0 -0.1
      children Shape {
	 appearance Appearance {
	    material Material {
	       ambientIntensity 0
	       diffuseColor IS color
	       specularColor 0 0 0
	       emissiveColor 0 0 0
	       shininess 0
	       transparency 0
	    }
	 }
	 geometry Box {
	    size 0.8 0.25 0.1
	 }
      }
   }
}

PROTO labelledBox [
		   field MFString string "undefd"
		   field SFColor color 0 0.43617 0.29533
		  ]
{Group {
   children [
      touchBox { color IS color  }
      Shape {
	 geometry Text {
	    string IS string
	    fontStyle FontStyle {
	       justify ["MIDDLE", "MIDDLE"]
	       size 0.25
	       spacing 1
	    }
	    length 0
	 }
      }
      ]
} }


# ----------------------------------------------------------------------
# The buttons for triggering off animation
#   They do not work from certain angles in CP 2.0, 
#   dunno if this is a feature or a bug
# ... should replace the billboard by a dashboard maybe

DEF AnimationButtons Billboard {
   axisOfRotation 0 1 0
   children [
      DEF nod_Button Transform {
	 children [
	    DEF nod_Trigger TouchSensor { }
	    labelledBox { string "nod"  color 0.1 0.1 0.8 }
	    ]
	 translation -1.7 2 0
	 
      }
      DEF shake_Button Transform {
	 children [
	    DEF shake_Trigger TouchSensor { }
	    labelledBox { string "shake" color 0.1 0.1 0.8 }
	    ]
	 translation -1.7 1.75 0
      }
      DEF hello_Button Transform {
	 children [
	    DEF hello_Trigger TouchSensor { }
	    labelledBox { string "hello" color 0.1 0.1 0.8 }
	   ]
	 translation -1.7 1.5 0
      }
      DEF bow_Button Transform {
	 children [
	    DEF bow_Trigger TouchSensor { }
	    labelledBox { string "bow" color 0.1 0.1 0.8 }
	    ]
	 translation -1.7 1.25 0
      }
      DEF lie_Button Transform {
	 children [
	    DEF lie_Trigger TouchSensor { }
	    labelledBox { string "lie" color 0.1 0.1 0.8 }
	    ]
	 translation -1.7 1 0
      }

      # fun

      DEF explode_Button Transform {
	 children [
	    DEF explode_Trigger TouchSensor { }
	    labelledBox { string "boom"  color 0.1 0.8 0.1 }
	    ]
	 translation 1.7 2 0
	 
      }
      DEF break_Button Transform {
	 children [
	    DEF break_Trigger TouchSensor { }
	    labelledBox { string "break"  color 0.1 0.8 0.1 }
	    ]
	 translation 1.7 1.75 0
	 
      }
      DEF repair_Button Transform {
	 children [
	    DEF repair_Trigger TouchSensor { }
	    labelledBox { string "repair"  color 0.1 0.8 0.1 }
	    ]
	 translation 1.7 1.5 0
      }
      DEF jump_Button Transform {
	 children [
	    DEF jump_Trigger TouchSensor { }
	    labelledBox { string "jump"  color 0.1 0.8 0.1 }
	    ]
	 translation 1.7 1.25 0
      }

      # movement

      DEF leftButton Transform {
	 children [
	    DEF left_Trigger TouchSensor { }
	    labelledBox { string "left"  color 0.9 0.1 0.1 }
	    ]
	 translation 1.7 0.75 0
      }
      DEF right_Button Transform {
	 children [
	    DEF right_Trigger TouchSensor { }
	    labelledBox { string "right"  color 0.9 0.1 0.1 }
	    ]
	 translation 1.7 0.5 0
      }
      DEF move1_Button Transform {
	 children [
	    DEF move1_Trigger TouchSensor { }
	    labelledBox { string "move1"  color 0.9 0.1 0.1 }
	    ]
	 translation 1.7 0.25 0
      }
      DEF reset_Button Transform {
	 children [
	    DEF reset_Trigger TouchSensor { }
	    labelledBox { string "reset"  color 0.9 0.1 0.1 }
	    ]
	 translation 1.7 0 0
      }
     ]
}



# ----------------------------------------------------------------------
#
# Triggers (Routes from TouchSensors to Animation Timers)
#
# ----------------------------------------------------------------------


ROUTE left_Trigger.touchTime TO left_Time.set_startTime

ROUTE right_Trigger.touchTime TO right_Time.set_startTime

ROUTE move1_Trigger.touchTime TO move1_Time.set_startTime

ROUTE jump_Trigger.touchTime TO jump_Time.set_startTime

ROUTE bow_Trigger.touchTime TO bow_Time.set_startTime

ROUTE lie_Trigger.touchTime TO lie_Time.set_startTime

ROUTE nod_Trigger.touchTime TO nod_Time.set_startTime

ROUTE shake_Trigger.touchTime TO shake_Time.set_startTime

ROUTE hello_Trigger.touchTime TO hello_Time.set_startTime

ROUTE break_Trigger.touchTime TO break_Time.set_startTime

ROUTE explode_Trigger.touchTime TO explode_Time.set_startTime

ROUTE repair_Trigger.touchTime TO repair_Time.set_startTime

ROUTE reset_Trigger.touchTime TO reset_Time.set_startTime

ROUTE reset_Trigger.touchTime TO turn_Script.hasResetClicked


# ----------------------------------------------------------------------
# The End
#
# Future plans for the beast:
# - replace it by a proto-architecture that can be inlined
#   (both the avatar and animations)
#
# - have other interfaces, e.g. the same with the EAI
#
# - have it do continous things with plane/cyl/etc. sensors for example.

